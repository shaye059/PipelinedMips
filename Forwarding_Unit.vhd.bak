library ieee;
use ieee.std_logic_1164.all;

entity Forwarding_Unit is
	port(
	
		--Input from regisrers: 
		ID_EX_Rs: IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		ID_EX_Rt: IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		
		EX_MEM_Rd: in std_logic_vector (7 downto 0);
		MEM_WB_Rd: in std_logic_vector (7 downto 0);
		
			
		--Control inputs: 
		EX_MEM_RegWrite: in std_logic;
		MEM_WB_RegWrite: in std_logic;
		
		--Mux control outputs: 
		ForwardA: out std_logic_vector (1 downto 0);
		ForwardB: out std_logic_vector (1 downto 0)
		
	);
End Forwarding_Unit;
	
architecture structual of Forwarding_Unit is

	--Signals
	Signal EX_MEM_Rd_Zero: std_logic; 
	signal MEM_WB_Rd_Zero: std_logic;
	Signal Rs_Rd_notEqual: std_logic; 	
	Signal ExM_Rd_Rt_notEqual: std_logic;
	Signal MW_Rd_Rt_notEqual: std_logic; 
	
	Signal Eight_Bit_Zero: std_logic_vector (7 downto 0);

	Signal Int_ForwardA: std_logic_vector (1 downto 0);
	Signal Int_ForwardB: std_logic_vector (1 downto 0);
	
	Component EightBitComparator
		port (
			
			i_Ai, i_Bi			: IN	STD_LOGIC_VECTOR(7 downto 0);
			o_LT		: OUT	STD_LOGIC
		);
	end Component;

	
BEGIN	

	Eight_Bit_Zero <= "00000000";
	--Forwarding signals set to '00' by defau;t
	Int_ForwardA <= "00";
	Int_ForwardB <= "00";
	
	
	--Comparison
	Compare_ExMemRd_IdExRs: EightBitComparator port map (EX_MEM_Rd, ID_EX_Rs, Rs_Rd_notEqual); 
	
	Compare_EXMEM_Rd_Zero: EightBitComparator port map (EX_MEM_Rd, Eight_Bit_Zero, EX_MEM_Rd_Zero); 
	
	Compare_ExMemRd_IdExRt: EightBitComparator port map (EX_MEM_Rd, ID_EX_Rt, ExM_Rd_Rt_notEqual);
	
	Compare_MemWb_Rd_Zero: EightBitComparator port map (MEM_WB_Rd, Eight_Bit_Zero, MEM_WB_Rd_Zero); 
	
	Compare_MemWbRd_IdExRt: EightBitComparator port map (MEM_WB_Rd, ID_Ex_Rt, MW_Rd_Rt_notEqual); 
	

	
	--Ex Hazard: 
	Int_ForwardA(1) <= EX_MEM_RegWrite and EX_MEM_Rd_Zero and not Rs_Rd_Equal;
	Int_ForwardB(1) <= EX_MEM_RegWrite and EX_MEM_Rd_Zero and not Rs_Rt_Equal;
	
	
	--Mem Hazard: 
	Int_ForwardA(0) <= MEM_WB_RegWrite and MEM_WB_Rd_Zero and not (MEM_WB_RegWrite and EX_MEM_Rd_Zero) and Rs_Rd_notEqual;
	Int_ForwardB(0) <= MEM_WB_RegWrite and MEM_WB_Rd_Zero and not (MEM_WB_RegWrite and EX_MEM_Rd_Zero) and ExM_Rd_Rt_notEqual and not MW_Rd_Rt_notEqual;
	
	
	--Output
	ForwardA <= Int_ForwardA;
	ForwardB <= Int_ForwardB;

end structual;
	
	
	
	
	
	
	